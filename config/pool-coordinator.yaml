---
# Source: pool-coordinator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pool-coordinator
  labels:
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: pool-coordinator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pool-coordinator
---
# Source: pool-coordinator/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pool-coordinator
rules:
  - apiGroups:
    - ""
    resources:
      - pods
    verbs:
      - create
      - update
      - patch
      - delete
      - list
      - watch
  - apiGroups:
    - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
    - ""
    resources:
      - secrets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
# Source: pool-coordinator/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pool-coordinator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pool-coordinator
subjects:
  - kind: ServiceAccount
    name: pool-coordinator
    namespace: default
---
# Source: pool-coordinator/templates/admission-webhooks/webhookService.yaml
apiVersion: v1
kind: Service
metadata:
  name: pool-coordinator-webhook
  namespace: default
  labels:
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: 9443
      protocol: TCP
      name: https
  selector:
    
      app.kubernetes.io/name: pool-coordinator
      app.kubernetes.io/instance: pool-coordinator
---
# Source: pool-coordinator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pool-coordinator
  labels:
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pool-coordinator
      app.kubernetes.io/instance: pool-coordinator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pool-coordinator
        app.kubernetes.io/instance: pool-coordinator
    spec:
      serviceAccountName: pool-coordinator
      securityContext:
        {}
      containers:
        - name: pool-coordinator
          securityContext:
            {}
          image: "aibox03.bj.intel.com:5000/pool-coordinator:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: WEBHOOK_PORT
              value: "9443"
            - name: SECRET_NAME
              value: "pool-coordinator"
            - name: SERVICE_NAME
              value: "pool-coordinator"
            - name: MUTATING_WEBHOOK_CONFIGURATION_NAME
              value: "pool-coordinator"
            - name: VALIDATING_WEBHOOK_CONFIGURATION_NAME
              value: "pool-coordinator"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: WEBHOOK_CERT_DIR
              value: "/tmp/k8s-webhook-server/serving-certs"
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
          resources:
            {}
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      priorityClassName: system-node-critical
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: pool-coordinator-admission
---
# Source: pool-coordinator/templates/admission-webhooks/validatingwebhookconfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: pool-coordinator
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    caBundle: Cg==
    service:
      name: pool-coordinator-webhook
      namespace: default
      path: /pool-coordinator-webhook-validate
  failurePolicy: Fail
  name: vpodcoordinator.kb.io
  rules:
  - apiGroups:
    - pool-coordinator.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - pods
  sideEffects: None
---
# Source: pool-coordinator/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  pool-coordinator-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: pool-coordinator-admission
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: pool-coordinator/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name:  pool-coordinator-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: pool-coordinator-admission
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - update
---
# Source: pool-coordinator/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  pool-coordinator-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: pool-coordinator-admission
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pool-coordinator-admission
subjects:
  - kind: ServiceAccount
    name: pool-coordinator-admission
    namespace: default
---
# Source: pool-coordinator/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  pool-coordinator-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: pool-coordinator-admission
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: pool-coordinator/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name:  pool-coordinator-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: pool-coordinator-admission
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pool-coordinator-admission
subjects:
  - kind: ServiceAccount
    name: pool-coordinator-admission
    namespace: default
---
# Source: pool-coordinator/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  pool-coordinator-admission-create
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: pool-coordinator-admission-create
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      name:  pool-coordinator-admission-create
      labels:
        app: pool-coordinator-admission-create
        helm.sh/chart: pool-coordinator-0.1.0
        app.kubernetes.io/name: pool-coordinator
        app.kubernetes.io/instance: pool-coordinator
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: create
          image: docker.io/oamdev/kube-webhook-certgen:v2.4.1
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=pool-coordinator-webhook,pool-coordinator-webhook.default.svc
            - --namespace=default
            - --secret-name=pool-coordinator-admission
            - --key-name=tls.key
            - --cert-name=tls.crt
      restartPolicy: OnFailure
      serviceAccountName: pool-coordinator-admission
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: pool-coordinator/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  pool-coordinator-admission-patch
  namespace: default
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: pool-coordinator-admission-patch
    helm.sh/chart: pool-coordinator-0.1.0
    app.kubernetes.io/name: pool-coordinator
    app.kubernetes.io/instance: pool-coordinator
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      name:  pool-coordinator-admission-patch
      labels:
        app: pool-coordinator-admission-patch
        helm.sh/chart: pool-coordinator-0.1.0
        app.kubernetes.io/name: pool-coordinator
        app.kubernetes.io/instance: pool-coordinator
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: patch
          image: docker.io/oamdev/kube-webhook-certgen:v2.4.1
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=pool-coordinator
            - --namespace=default
            - --secret-name=pool-coordinator-admission
            - --patch-failure-policy=Fail
            - --patch-mutating=false
            - --patch-validating=true
            - --log-level=trace
      restartPolicy: OnFailure
      serviceAccountName: pool-coordinator-admission
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
